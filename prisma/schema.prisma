// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @unique
  full_name         String?
  username          String   @unique
  email             String   @unique
  password          String?
  phone             String?  @unique
  role              String?  @default("USER")
  provider          String   @default("EMAIL")
  longitude         String?
  latitude          String?
  address           String?
  profile_image_url String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())

  merchant  Merchant[]
  reviews   Review[]
  carts     Cart[]
  checkouts Checkout[]
  favorites Favorite[]
  histories History[]

  @@map("users")
}

model Market {
  id                Int      @id @unique @default(autoincrement())
  slug              String   @default(uuid())
  name              String
  description       String?  @db.Text
  profile_image_url String?
  longitude         String?
  latitude          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())

  merchants Merchant[]

  @@map("markets")
}

model Merchant {
  id                Int      @id @unique @default(autoincrement())
  slug              String   @default(uuid())
  name              String
  profile_image_url String?
  description       String?  @db.Text
  addresses         String?
  longitude         String?
  latitude          String?
  user_id           String
  market_id         Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())

  user     User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  market   Market?   @relation(fields: [market_id], references: [id], onDelete: SetNull)
  products Product[]

  @@map("merchants")
}

model Category {
  id          Int      @id @unique @default(autoincrement())
  name        String   @unique
  description String?  @db.Text
  image_url   String?
  range_price String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  product_categories ProductCategory[]

  @@map("categories")
}

model ProductCategory {
  id          Int      @id @unique @default(autoincrement())
  product_id  Int
  category_id Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  product  Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  category Category @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@map("product_categories")
}

model Product {
  id          Int      @id @unique @default(autoincrement())
  slug        String   @default(uuid())
  name        String
  description String?  @db.Text
  price       Float
  merchant_id Int
  stock       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  merchant           Merchant          @relation(fields: [merchant_id], references: [id], onDelete: Cascade)
  reviews            Review[]
  carts              Cart[]
  product_categories ProductCategory[]
  checkout_details   CheckoutDetails[]
  favorites          Favorite[]

  @@map("products")
}

model Favorite {
  id         Int      @id @unique @default(autoincrement())
  user_id    String
  product_id Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@map("favorites")
}

model Review {
  id         Int      @id @unique @default(autoincrement())
  rating     Int
  comment    String?
  user_id    String
  product_id Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Cart {
  id         Int      @id @unique @default(autoincrement())
  slug       String   @default(uuid())
  user_id    String
  product_id Int
  quantity   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@map("carts")
}

model Checkout {
  id          Int      @id @unique @default(autoincrement())
  slug        String   @default(uuid())
  user_id     String
  total_price Float
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  user             User              @relation(fields: [user_id], references: [id], onDelete: Cascade)
  checkout_details CheckoutDetails[]

  @@map("checkouts")
}

model CheckoutDetails {
  id               Int      @id @unique @default(autoincrement())
  checkout_id      Int
  product_id       Int?
  product_identity String?  @db.Text
  product_quantity Int
  product_price    Float
  product_subtotal Float
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())

  checkout Checkout @relation(fields: [checkout_id], references: [id], onDelete: Cascade)
  product  Product? @relation(fields: [product_id], references: [id], onDelete: SetNull)

  @@map("checkout_details")
}

model Images {
  id        Int      @id @unique @default(autoincrement())
  item_id   Int?
  url       String?  @db.Text
  type      String? // product, merchant, market, user
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("images")
}

model History {
  id         Int      @id @unique @default(autoincrement())
  slug       String   @default(uuid())
  predict    String
  accuration Float
  user_id    String
  image_url  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("histories")
}
